package edu.teco.dnd.util;

import java.util.Arrays;

/**
 * Represents a hash value produced by a given algorithm. This is an immutable object.
 * 
 * @see HashAlgorithm
 */
public class Hash {
	private final HashAlgorithm<?> algorithm;
	private final byte[] hash;

	public Hash(final HashAlgorithm<?> algorithm, final byte[] hash) {
		this.algorithm = algorithm;
		this.hash = hash;
	}

	/**
	 * Returns the algorithm that was used to calculate this Hash.
	 * 
	 * @return the algorithm used to calculate this Hash
	 */
	public HashAlgorithm<?> getAlgorithm() {
		return algorithm;
	}

	/**
	 * Returns the actual hash value. The byte array is returned as a copy so that the value of this Hash cannot be
	 * modified.
	 * 
	 * @return the actual hash value
	 */
	public byte[] getHash() {
		return Arrays.copyOf(hash, hash.length);
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((algorithm == null) ? 0 : algorithm.hashCode());
		result = prime * result + Arrays.hashCode(hash);
		return result;
	}

	/**
	 * Two Hashes are considered equal if they were generated by equal HashAlgorithms and have the same hash sums.
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Hash other = (Hash) obj;
		if (algorithm == null) {
			if (other.algorithm != null)
				return false;
		} else if (!algorithm.equals(other.algorithm))
			return false;
		if (!Arrays.equals(hash, other.hash))
			return false;
		return true;
	}
}